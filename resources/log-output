#!/bin/bash

blue='\033[1;34m'
bold='\033[1m'
red='\033[0;31m'
reset='\033[0m'
yellow='\033[1;33m'

info_level_weight=40
warn_level_weight=30
error_level_weight=20
debug_level_weight=10

initialise_logging () {
  #Â Read valid log level from environment or fallback to default level
  log_weight_name=$(echo "${LOGLEVEL:-INFO}_level_weight" | tr '[:upper:]' '[:lower:]')

  # Expand log level weight via indirection
  log_weight=${!log_weight_name}

  # Ensure log level was expanded to a valid weight or exit with error
  if [[ -z ${log_weight} ]]; then
      printf "${red}Error:${reset} Invalid log level '${LOGLEVEL}' set in environment, exiting..\n" >&2
      exit 1
  fi
}

log () {
  local verbosity=$1
  local colour=$2
  local title=$3
  local message=$4

  if [[ ${verbosity} -eq ${error_level_weight} ]]; then
      printf "${colour}${title}:${reset} ${message}\n" >&2
  elif [[ ${verbosity} -ge ${log_weight} ]]; then
      printf "${colour}${title}:${reset} ${message}\n" >&1
  fi
}

info () {
    log ${info_level_weight} ${blue} "Info" "$1"
}

warn () {
    log ${warn_level_weight} ${yellow} "Warning" "$1"
}

error () {
    log ${error_level_weight} ${red} "Error" "$1"
}

debug () {
    log ${debug_level_weight} ${yellow} "Debug" "$1"
}

usage () {
    info "Usage:"
    info "  log-output <level> \"<message>\""
    info ""
    info "Arguments:"
    info "  level      One of 'info', 'warn', 'error', or 'debug' to indicate the log level for this message"
    info "  message    The message to be printed dependent upon the LOGLEVEL environment variable value; must be quoted"
}

parse_command_line_args () {
    level="${1}"
    message="${2}"
}

verify_level () {
    if [[ ! "${level}" =~ ^(info|warn|error|debug)$ ]]; then
        error "Unknown log level specified: '${level}'"
        usage
        exit 1
    fi
}

main () {
    initialise_logging

    if [[ $# -ne 2 ]]; then
        usage
        exit 1
    fi

    parse_command_line_args "${@}"
    verify_level

    ${level} "${message}"
}
main "$@"
